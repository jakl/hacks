Collections and Reflection
Due 10/28/10
Overview
Write a program to input a set of “bean” objects having different owners. Work with any bean type, and automatically query for its attributes.
Java Beans
The term “bean” in Java describes a class with regularly named “set” and “get” methods that define attributes. For instance, a class might have methods int getCount() and void setCount(int). These two methods imply a “Count” property of type int, accessible via those methods. A “bean” class might have a number of such attributes, each with its own set/get pair. (In addition, it may have “read only” attributes for which there is only a get method, but we won't deal with that in this exercise.) Finally, a bean class must have a default constructor, so objects can be created without any supporting data.
The combination of the above rules makes it possible for Java code to work with an arbitrary bean class by using reflection. Via reflection, one can create an object of the bean class, determine what its properties are (via getMethods), assign property values into the bean (via the relevant set method), or retrieve property values to print out (via the relevant get method).
See classes Pants, and Shirt within this project for examples of Java beans. Pants has properties Length, Size, and Cost, for instance.
A bean may even have other beans as properties. So a bean class might have methods OtherClass getOther() and void setOther(OtherClass). See class Outfit in this project for an example, with its properties of Shirt and Pants.
Step 1
The first step in this project is to write a program that accepts a sequence of commands of these two forms, ending with EOF:
newProduct userName productName productClass
where userName is any one-word name (e.g. “Clint”), productName is any one-word name (“e.g. newPants”) and productClass is a class derived from the base class Product in our project, and meeting the bean requirements (e.g. com.cstaley.AdvJava.Attrs.Pants). The productClass must also have a constructor taking just a String for the product's name. Using reflection, get the Class object for productClass, and call that String-taking constructor to create a new object of the class, passing productName as its name. You may find it useful to research Class.forName, Class.getConstructor, and the Constructor class.
After creating the new Product-derived bean, determine what properties it has (see getMethods, for instance) and query the user for its properties, one property at a time. For now, recognize only properties of type bool, int, double, Boolean, Integer, or Double. Ignore properties of any other type. Prompt for each property's value, by property name, and scan in the appropriate type, assigning it into the Product-derived bean.
Use an appropriate Collections-library clsss to ssociate the now filled-in product with the userName, for the showProducts command below:
showProducts
for each user for whom any newProduct command has ever been run, list all of his products, in order of productName, giving the product's properties in brackets after the product name, as in the sample run below.
Step 2
Now, extend your program to work with bean properties as well as the basic elemental ones. As long as a property has a default constructor, then treat it as a bean, and input its value by querying for all get/set properties it may have (if any), one property per line. In the showProducts command, use nested [] for the bean property values. See the sample run below for an Outfit, for instance.
Step 3
Add, for each user, a set of default values for each property name and type, stored from the last such value the user entered. Offer this default first, allowing him to select this default instead of entering a new value. Even if the same property name and type appear in several products, store just one default for them all.
Turnin
Check your code carefully for proper style (see the stylesheet on my webpage, and then submit it to the turnin directory ~cstaley/390Java/Attributes/turnin. Turn in just one file, named Attributes.java..
Sample Run for Step 1 and 2
Enter command: oops
Bad command oops
Enter command: showProducts
Enter command: newProduct Clint pants1 com.cstaley.AdvJava.Attrs.Pants
Enter value for Cost: 12.34
Enter value for Length: 42
Enter value for Size: 30
Enter command: showProducts
Clint has:
pants1: [Cost=>12.34, Length=>42, Size=>30]
Enter command: newProduct Clint shirt1 com.cstaley.AdvJava.Attrs.Shirt
Enter value for Price: 24
Enter value for Size: 42
Enter command: showProducts
Clint has:
pants1: [Cost=>12.34, Length=>42, Size=>30]
shirt1: [Price=>24, Size=>42]
Enter command: newProduct Clint shirt2 com.cstaley.AdvJava.Attrs.Shirt
Enter value for Price: 10
Enter value for Size: 20
Enter command: newProduct Jane car1 com.cstaley.AdvJava.Attrs.Car
Enter value for Maker: Toyota
Enter value for NumSeats: 4
Enter value for Price: 12345
Enter command: showProducts
Clint has:
pants1: [Cost=>12.34, Length=>42, Size=>30]
shirt1: [Price=>24, Size=>42]
shirt2: [Price=>10, Size=>20]
Jane has:
car1: [Maker=>Toyota, NumSeats=>4, Price=>12345]
Enter command: newProduct Clint outfit1 com.cstaley.AdvJava.Attrs.Outfit
Enter value for Pants: [
Enter value for Cost: 34.5
Enter value for Length: 30
Enter value for Size: 30
Enter value for Shirt: [
Enter value for Price: 34
Enter value for Size: 34
Enter command: showProducts
Clint has:
outfit1: [Pants=>[Cost=>34.5, Length=>30, Size=>30], Shirt=>[Price=>34, Size=>34]]
pants1: [Cost=>12.34, Length=>42, Size=>30]
shirt1: [Price=>24, Size=>42]
shirt2: [Price=>10, Size=>20]
Jane has:
car1: [Maker=>Toyota, NumSeats=>4, Price=>12345]
Enter command: